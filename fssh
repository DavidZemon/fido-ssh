#!/bin/bash

yubico_vid=1050 # https://www.yubico.com/
token_vid=3815 # https://www.tokenring.com/

function run_usbip() {
  if [ -z "${use_docker}" ] ; then
    sudo usbip "${@}"
  else
    docker exec "${docker_container_name}" usbip "${@}"
  fi
}

function unbind_and_stop_container() {
    local busids=("$@")
    retval=0

    if [ ${#busids[@]} -eq 0 ]; then
        echo "ERROR: No bus IDs provided to unbind"
        retval=1
    fi

    for busid in "${busids[@]}"; do
        echo "Unbinding usbip bus ID ${busid}"
        if ! run_usbip unbind -b "${busid}" ; then
            echo "ERROR: Failed to unbind usbip bus ID ${busid}"
            retval=1
        fi
    done

    if [ -z "${use_docker}" ] ; then
        sudo killall usbipd > /dev/null 2>&1
    else
        docker stop -t 5 "${docker_container_name}" > /dev/null 2>&1
    fi

    return ${retval}
}

fssh_config="${HOME}/.config/fsshrc"
if [ -f "${fssh_config}" ] ; then
    source "${fssh_config}"
fi
if [ -z "${fssh_vid_list}" ] ; then
    fssh_vid_list=("${yubico_vid}" "${token_vid}")
fi
use_docker=${use_docker:-1}
docker_container_name="${docker_container_name:-fido-usbipd}"

echo "Using FIDO USB VID list: ${fssh_vid_list[*]}"
echo "FIDO VID 1: ${fssh_vid_list[0]}"
echo "FIDO VID 2: ${fssh_vid_list[1]}"

mods=$(sudo lsmod)
for mod in usbip_host vhci_hcd ; do
    if (echo "${mods}" | grep -q ${mod}) ; then
        echo "Kernel module ${mod} already loaded"
    else
        echo "Loading kernel module ${mod}"
        if ! sudo modprobe ${mod} ; then
            echo "ERROR: Exiting $(basename "${0}") due to kernel module failure"
            exit 1
        fi
    fi
done

# Find FIDO devices
fido_docker_args=()
while read -r device ; do
    prefix=$(echo "${device}" | cut -d':' -f1)
    bus=$(echo "${prefix}" | cut -d' ' -f2)
    port=$(echo "${prefix}" | cut -d' ' -f4)
    path="/dev/bus/usb/${bus}/${port}"
    echo "Found FIDO device: ${path}"
    fido_docker_args+=(--device "${path}")
done < <(lsusb | grep -E "ID ($(IFS='|'; echo "${fssh_vid_list[*]}")):")
if [ ${#fido_docker_args[@]} -eq 0 ]; then
    echo "No FIDO devices found. Exiting $(basename "${0}")"
    exit 1
fi

# Find usbip bus IDs
busids=()
while read -r usbip_line ; do
    busid=$(echo "${usbip_line}" | cut -d' ' -f3)
    echo "Found FIDO device with usbip bus ID: ${busid}"
    busids+=("${busid}")
done < <(docker run -t --rm --privileged -v /dev:/dev --name usbip-discovery usbipd usbip list --local | grep -- '- busid' | grep -E " \(($(IFS='|'; echo "${fssh_vid_list[*]}")):")
if [ ${#busids[@]} -eq 0 ]; then
    echo "ERROR: Failed to find any matching bus IDs reported by usbip"
    exit 1
fi

if [ -z "${use_docker}" ] ; then
    usbipd --daemon
else
    docker run \
        -d \
        --rm \
        --privileged \
        -p 127.0.0.1:3240:3240/tcp \
        "${fido_docker_args[@]}" \
        --name "${docker_container_name}" \
        usbipd \
        usbipd --debug \
        > /dev/null
fi

bound_ids=()
for busid in "${busids[@]}" ; do
    if run_usbip bind -b "${busid}" ; then
        echo "Successfully bound usbip bus ID ${busid}"
        bound_ids+=("${busid}")
    else
        echo "ERROR: Failed to bind usbip bus ID ${busid}"
        unbind_and_stop_container "${bound_ids[@]}"
        exit 1
    fi
done

echo "Opening SSH connection now. Will bind to bus IDs ${bound_ids[*]}"
ssh -t -R 3240:localhost:3240 "${@}" "sudo usbip attach -r localhost -b ${bound_ids[0]} > /dev/null && sudo usbip detach -p 0 > /dev/null && sudo usbip attach -r localhost -b ${bound_ids[0]} && sudo -k && bash -i ; sudo usbip detach --port 00"

unbind_and_stop_container "${bound_ids[@]}"
